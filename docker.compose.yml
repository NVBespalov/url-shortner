services:
  # Frontend
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
#    depends_on:
#      - api
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_GA_ID=${GA_ID}
      - FRONTEND_PORT=${FRONTEND_PORT}
    networks:
      - frontend-network
      - monitoring-network

  # Backend API
#  api:
#    build:
#      context: ./src/backend
#      dockerfile: Dockerfile
#    ports:
#      - "4000:4000"
#    depends_on:
#      - mongodb
#      - redis
#    environment:
#      - NODE_ENV=production
#      - PORT=4000
#      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/urlshortener
#      - REDIS_URI=redis://redis:6379
#      - JWT_SECRET=${JWT_SECRET}
#      - JWT_EXPIRES_IN=7d
#      - BASE_URL=http://localhost:4000
#    networks:
#      - backend-network
#      - frontend-network
#      - monitoring-network
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"
#        max-file: "3"
  #
  #  # Analytics Service
  #  analytics:
  #    build:
  #      context: ./analytics
  #      dockerfile: Dockerfile
  #    ports:
  #      - "4001:4001"
  #    depends_on:
  #      - mongodb
  #      - redis
  #    environment:
  #      - NODE_ENV=production
  #      - PORT=4001
  #      - MONGODB_URI=mongodb://mongodb:27017/urlshortener
  #      - REDIS_URI=redis://redis:6379
  #    networks:
  #      - backend-network
  #      - monitoring-network
  #
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # PostgreSQL

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=urlshortener
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

#  # Redis
#  redis:
#    image: redis:7-alpine
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#    networks:
#      - backend-network
#    command: redis-server --appendonly yes
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  # Prometheus
#  prometheus:
#    image: prom/prometheus:latest
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    networks:
#      - monitoring-network
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#      - '--web.console.templates=/usr/share/prometheus/consoles'
#
#  # Grafana
#  grafana:
#    image: grafana/grafana:latest
#    ports:
#      - "3001:3000"
#    volumes:
#      - ./grafana/provisioning:/etc/grafana/provisioning
#      - grafana_data:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
#      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
#      - GF_USERS_ALLOW_SIGN_UP=false
#    networks:
#      - monitoring-network
#    depends_on:
#      - prometheus
#
#  # Node Exporter для системных метрик
#  node-exporter:
#    image: prom/node-exporter:latest
#    ports:
#      - "9100:9100"
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#    networks:
#      - monitoring-network

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data: